generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model album {
  id_album    Int       @id @default(autoincrement())
  nama_album  String    @db.Char(50)
  slug_album  String    @db.Char(50)
  foto        String    @db.Text
  created_by  String    @db.Char(20)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  modified_by String?   @db.Char(20)
  modified_at DateTime? @db.DateTime(0)
  exfoto      foto[]
}

model bank {
  id_bank   Int    @id @default(autoincrement())
  nama_bank String @db.VarChar(100)
  atas_nama String @db.VarChar(100)
  norek     String @db.VarChar(100)
  logo      String @db.VarChar(100)
}

model company {
  id_company      Int       @id @default(autoincrement())
  company_name    String    @db.VarChar(100)
  company_desc    String    @db.Text
  company_address String    @db.Text
  company_maps    String    @db.Text
  company_phone   String    @db.Char(30)
  company_phone2  String    @db.Char(30)
  company_fax     String    @db.Char(30)
  company_email   String    @db.Char(30)
  foto            String    @db.Text
  foto_type       String    @db.Char(10)
  created         DateTime  @default(now()) @db.DateTime(0)
  modified        DateTime? @db.DateTime(0)
  created_by      String    @db.Char(50)
  modified_by     String    @db.Char(50)
}

model diskon {
  id    Int @id
  harga Int
}

model event {
  id_event    Int       @id @default(autoincrement())
  nama_event  String    @db.VarChar(100)
  slug_event  String?   @db.VarChar(100)
  deskripsi   String?   @db.Text
  kategori    Int?
  foto        String?   @db.Text
  foto_type   String?   @db.Char(10)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  created_by  String    @db.Char(50)
  modified_at DateTime? @db.DateTime(0)
  modified_by String    @db.Char(50)
}

model foto {
  id_foto     Int       @id @default(autoincrement())
  album_id    Int
  nama_foto   String    @db.Char(100)
  slug_foto   String    @db.Char(100)
  foto        String    @db.Text
  created_by  String    @db.Char(20)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  modified_by String    @db.Char(20)
  modified_at DateTime? @db.DateTime(0)
  album       album     @relation(fields: [album_id], references: [id_album], onDelete: Cascade, map: "foto_FK")

  @@index([album_id], map: "foto_FK")
}

model jam {
  id           Int    @id @default(autoincrement())
  jam          String @db.VarChar(50)
  is_available Int    @default(1) @db.TinyInt
}

model kategori {
  id_kategori   Int       @id @default(autoincrement())
  nama_kategori String    @db.VarChar(20)
  slug_kat      String    @db.VarChar(20)
  created_by    String    @db.Char(50)
  created_at    DateTime  @default(now()) @db.DateTime(0)
  modified_by   String    @db.Char(50)
  modified_at   DateTime? @db.DateTime(0)
}

model kontak {
  id_kontak   Int       @id @default(autoincrement())
  nama_kontak String    @db.Char(50)
  nohp        String    @db.Char(50)
  created_by  String    @db.Char(50)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  modified_by String    @db.Char(50)
  modified_at DateTime? @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model kota {
  id_kota     Int
  provinsi_id Int
  nama_kota   String @db.VarChar(100)

  @@ignore
}

model lapangan {
  id_lapangan      Int                @id @default(autoincrement())
  nama_lapangan    String             @db.VarChar(100)
  harga            Int
  foto             String             @db.Text
  created_by       String             @db.VarChar(50)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  modified_by      String             @db.VarChar(50)
  modified_at      DateTime?          @db.DateTime(0)
  transaksi        transaksi[]
  transaksi_detail transaksi_detail[]
}

model login_attempts {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  ip_address String @db.VarChar(15)
  login      String @db.VarChar(100)
  time       Int?   @db.UnsignedInt
}

model page {
  id_page    Int    @id @default(autoincrement())
  judul_page String @db.VarChar(50)
  judul_seo  String @db.VarChar(50)
  isi_page   String @db.Text
  gambar     String @db.Text
}

model post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  createdBy String
  user      user     @relation(fields: [createdBy], references: [id], map: "Post_createdById_fkey")

  @@index([createdBy], map: "Post_createdById_fkey")
  @@index([name], map: "Post_name_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model provinsi {
  id_provinsi   Int
  nama_provinsi String @db.VarChar(50)

  @@ignore
}

model session {
  id           String   @id @default(uuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model slider {
  id_slider   Int       @id @default(autoincrement())
  no_urut     Int
  nama_slider String    @db.VarChar(100)
  link        String    @db.VarChar(100)
  foto        String    @db.Text
  foto_type   String    @db.Char(10)
  foto_size   Int
  created_at  DateTime  @default(now()) @db.DateTime(0)
  created_by  String    @db.Char(50)
  modified_at DateTime? @db.DateTime(0)
  modified_by String    @db.Char(50)
}

model subscriber {
  id_subscriber Int      @id @default(autoincrement())
  email         String   @db.Char(20)
  status        Int
  created_at    DateTime @default(now()) @db.DateTime(0)
}

model transaksi {
  id_trans         Int                @id @default(autoincrement())
  id_invoice       String             @db.Char(15)
  id_lapangan      Int
  user_id          String
  subtotal         Int
  diskon           Int
  grand_total      Int
  deadline         DateTime           @db.DateTime(0)
  catatan          String             @db.Text
  status           Int
  created_date     DateTime           @db.Date
  created_time     DateTime           @db.Time(0)
  updatedAt         DateTime           @db.DateTime(0)
  user             user               @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "transaksi_FK")
  lapangan         lapangan           @relation(fields: [id_lapangan], references: [id_lapangan], onDelete: Cascade, map: "transaksi_FK_1")
  transaksi_detail transaksi_detail[]

  @@index([user_id], map: "transaksi_FK")
  @@index([id_lapangan], map: "transaksi_FK_1")
}

model transaksi_detail {
  id_transdet Int       @id @default(autoincrement())
  trans_id    Int
  lapangan_id Int
  tanggal     DateTime  @db.Date
  jam_mulai   DateTime? @db.Time(0)
  durasi      Int
  jam_selesai DateTime? @db.Time(0)
  harga_jual  Int
  total       Int
  created_at  DateTime  @default(now()) @db.DateTime(0)
  lapangan    lapangan  @relation(fields: [lapangan_id], references: [id_lapangan], onDelete: Cascade, map: "transaksi_detail_FK")
  transaksi   transaksi @relation(fields: [trans_id], references: [id_trans], onDelete: Cascade, map: "transaksi_detail_FK_1")

  @@index([lapangan_id], map: "transaksi_detail_FK")
  @@index([trans_id], map: "transaksi_detail_FK_1")
}

model user {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  role          String?
  account       account[]
  post          post[]
  session       session[]
  transaksi     transaksi[]
}

model users {
  id                      Int       @id @default(autoincrement())
  name                    String    @db.VarChar(50)
  username                String    @db.VarChar(100)
  password                String    @db.VarChar(255)
  email                   String    @db.VarChar(100)
  phone                   String?   @db.VarChar(20)
  provinsi                Int?
  kota                    Int?
  address                 String    @db.Text
  usertype                Int
  active                  Int?      @db.UnsignedTinyInt
  photo                   String?   @db.Text
  photo_type              String?   @db.VarChar(10)
  ip_address              String    @db.VarChar(45)
  salt                    String?   @db.VarChar(255)
  activation_code         String?   @db.VarChar(40)
  forgotten_password_code String?   @db.VarChar(40)
  forgotten_password_time Int?      @db.UnsignedInt
  remember_code           String?   @db.VarChar(40)
  last_login              Int?
  created_on              Int
  modified                DateTime? @db.DateTime(0)

  @@ignore
}

model users_group {
  id_group   Int    @id @default(autoincrement())
  name_group String @db.Char(20)
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
